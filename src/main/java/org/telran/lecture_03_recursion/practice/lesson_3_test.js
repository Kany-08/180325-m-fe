import {
  sumToN, factorial, countOccurrences, fibonacci, findMax, flattenArray, power, 
  reverseString, sumDigits, countNestedElements
} from './lesson_3.js';
import { logTestCase, logTestCaseWithException } from '../../utils/common_util.js';

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sumToN
function testSumToN() {
    console.log("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sumToN:");
    logTestCase("–°—É–º–º–∞ –æ—Ç 1 –¥–æ 5", sumToN(5), 15);
    logTestCase("–°—É–º–º–∞ –æ—Ç 1 –¥–æ 1", sumToN(1), 1);
    logTestCase("–°—É–º–º–∞ –æ—Ç 1 –¥–æ 0", sumToN(0), 0);
    logTestCase("–°—É–º–º–∞ –æ—Ç 1 –¥–æ 10", sumToN(10), 55);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ factorial
function testFactorial() {
    console.log("‚úñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ factorial:");
    logTestCase("–§–∞–∫—Ç–æ—Ä–∏–∞–ª 0", factorial(0), 1);
    logTestCase("–§–∞–∫—Ç–æ—Ä–∏–∞–ª 1", factorial(1), 1);
    logTestCase("–§–∞–∫—Ç–æ—Ä–∏–∞–ª 5", factorial(5), 120);
    logTestCase("–§–∞–∫—Ç–æ—Ä–∏–∞–ª 4", factorial(4), 24);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reverseString
function testReverseString() {
    console.log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reverseString:");
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'hello'", reverseString("hello"), "olleh");
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'a'", reverseString("a"), "a");
    logTestCase("–°—Ç—Ä–æ–∫–∞ ''", reverseString(""), "");
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'recursion'", reverseString("recursion"), "noisrucer");
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fibonacci
function testFibonacci() {
    console.log("üåÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fibonacci:");
    logTestCase("–§–∏–±–æ–Ω–∞—á—á–∏ 0", fibonacci(0), 0);
    logTestCase("–§–∏–±–æ–Ω–∞—á—á–∏ 1", fibonacci(1), 1);
    logTestCase("–§–∏–±–æ–Ω–∞—á—á–∏ 5", fibonacci(5), 5);
    logTestCase("–§–∏–±–æ–Ω–∞—á—á–∏ 8", fibonacci(8), 21);
    logTestCase("–§–∏–±–æ–Ω–∞—á—á–∏ 10", fibonacci(10), 55);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ countNestedElements
function testCountNestedElements() {
    console.log("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ countNestedElements:");
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, [2, 3], [4, [5, 6]], 7]", countNestedElements([1, [2, 3], [4, [5, 6]], 7]), 7);
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, 2, 3]", countNestedElements([1, 2, 3]), 3);
    logTestCase("–ú–∞—Å—Å–∏–≤ [[1, 2], [3, 4]]", countNestedElements([[1, 2], [3, 4]]), 4);
    logTestCase("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", countNestedElements([]), 0);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ flattenArray
function testFlattenArray() {
    console.log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ flattenArray:");
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, [2, [3, 4]], 5]", flattenArray([1, [2, [3, 4]], 5]), [1, 2, 3, 4, 5]);
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, 2, 3]", flattenArray([1, 2, 3]), [1, 2, 3]);
    logTestCase("–ú–∞—Å—Å–∏–≤ [[1, 2], [3, 4]]", flattenArray([[1, 2], [3, 4]]), [1, 2, 3, 4]);
    logTestCase("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", flattenArray([]), []);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ countOccurrences
function testCountOccurrences() {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ countOccurrences:");
    logTestCase("–°–∏–º–≤–æ–ª 'l' –≤ —Å—Ç—Ä–æ–∫–µ 'hello'", countOccurrences("hello", "l"), 2);
    logTestCase("–°–∏–º–≤–æ–ª 'a' –≤ —Å—Ç—Ä–æ–∫–µ 'banana'", countOccurrences("banana", "a"), 3);
    logTestCase("–°–∏–º–≤–æ–ª 'x' –≤ —Å—Ç—Ä–æ–∫–µ 'hello'", countOccurrences("hello", "x"), 0);
    logTestCase("–°–∏–º–≤–æ–ª 'o' –≤ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ", countOccurrences("", "o"), 0);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sumDigits
function testSumDigits() {
    console.log("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sumDigits:");
    logTestCase("–ß–∏—Å–ª–æ 123", sumDigits(123), 6);
    logTestCase("–ß–∏—Å–ª–æ 9", sumDigits(9), 9);
    logTestCase("–ß–∏—Å–ª–æ 999", sumDigits(999), 27);
    logTestCase("–ß–∏—Å–ª–æ 1000", sumDigits(1000), 1);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findMax
function testFindMax() {
    console.log("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findMax:");
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, 5, 3, 9, 2]", findMax([1, 5, 3, 9, 2]), 9);
    logTestCase("–ú–∞—Å—Å–∏–≤ [10]", findMax([10]), 10);
    logTestCase("–ú–∞—Å—Å–∏–≤ [-1, -5, -3]", findMax([-1, -5, -3]), -1);
    logTestCase("–ú–∞—Å—Å–∏–≤ [7, 7, 7]", findMax([7, 7, 7]), 7);
    console.log();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ power
function testPower() {
    console.log("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ power:");
    logTestCase("2 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 3", power(2, 3), 8);
    logTestCase("5 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 0", power(5, 0), 1);
    logTestCase("3 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 4", power(3, 4), 81);
    logTestCase("10 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 2", power(10, 2), 100);
    console.log();
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runAllTests() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n");
    
    testSumToN();
    testFactorial();
    testReverseString();
    testFibonacci();
    testCountNestedElements();
    testFlattenArray();
    testCountOccurrences();
    testSumDigits();
    testFindMax();
    testPower();
    
    console.log("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

runAllTests();