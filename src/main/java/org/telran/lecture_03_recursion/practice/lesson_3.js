/**
 * Рекурсивно выводит числа от n до 1, затем "Готово!"
 * @param {number} n - Начальное число для обратного отсчета
 * @returns {void}
 */
export function countDown(n) {
    if (n <= 0) {
        console.log("Готово");
        return;
    }
    console.log(n);
    countDown(n-1);
}

//countDown(5);

/**
 * Рекурсивно вычисляет сумму всех натуральных чисел от 1 до n
 * @param {number} n - Верхняя граница суммирования
 * @returns {number} Сумма чисел от 1 до n
 */
// 2 -> 1 + 2
// 3 -> 1 + 2 +3
// 4 -> 1 + 2 + 3 + 4
export function sumToN(n) {
    console.log("Вход в метод sumToN с параметром n ="  + n);
    if (n <= 0) {
        console.log("Выход из метод sumToN с параметром n ="  + n);
        return 0;
    }
    const result = n + sumToN(n-1);
    console.log("Результат работы метода  sumToN с параметром n = " + n + " с результатом = " + result) ;
    return result;
    // TODO: Добавьте базовый случай
    // TODO: Реализуйте рекурсивный случай
    // Верните сумму текущего числа n и результата вызова функции для (n - 1)
}
console.log(sumToN(3));

/**
 * Рекурсивно вычисляет факториал числа n
 * @param {number} n - Число для вычисления факториала
 * @returns {number} Факториал числа n
 */
// 4! => 4*3*2*1 => n*(n-1)*(n-2) 4! = 24
export function factorial(n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n-1);
}

console.log(factorial(6));

//console.log("ABCD".charAt(2));
console.log("ABCD".substring(1, 4));


/**
 * Рекурсивно переворачивает строку
 * @param {string} str - Строка для переворота
 * @returns {string} Перевернутая строка
 */
// abc -> cba
export function reverseString(str) {
    if (str.length <= 1) {
        return str;
    }
    return reverseString(str.substring(1)) + str.charAt(0);
}

function reverseNumbers(arr) {
    if (arr.length <= 1) {
        return arr[0];
    }
    return reverseNumbers(arr.slice(1)) + " " + arr[0];
}

//console.log("reverse numbers = " + reverseNumbers([1, 2, 3, 4]));

//console.log(reverseString("ABCD"));

/**
 * Рекурсивно вычисляет число Фибоначчи
 * @param {number} n - Порядковый номер числа Фибоначчи
 * @returns {number} n-е число Фибоначчи
 */
export function fibonacci(n) {
    // TODO: Добавьте базовые случаи

    // TODO: Реализуйте рекурсивный случай
    // Верните сумму fibonacci(n - 1) и fibonacci(n - 2)
}

/**
 * Подсчёт всех элементов во вложенном массиве
 * @param {Array} arr - Массив, который может содержать вложенные массивы
 * @returns {number} Общее количество элементов
 */
export function countNestedElements(arr) {
    // TODO: Создайте переменную для подсчета элементов

    // TODO: Переберите каждый элемент массива

    // TODO: Проверьте, является ли элемент массивом (используйте Array.isArray())

    // TODO: Если это массив, добавьте к счетчику результат рекурсивного вызова

    // TODO: Если это не массив, увеличьте счетчик на 1

    // TODO: Верните общий счетчик
}

// Тестовый массив
const nestedArray = [1, [2, 3], [4, [5, 6]], 7];

/**
 * Рекурсивно "сплющивает" вложенный массив в одномерный
 * @param {Array} arr - Массив, который может содержать вложенные массивы
 * @returns {Array} Одномерный массив со всеми элементами
 */
export function flattenArray(arr) {
    // TODO: Создайте пустой результирующий массив

    // TODO: Переберите каждый элемент входного массива

    // TODO: Проверьте, является ли элемент массивом

    // TODO: Если это массив, рекурсивно "сплющите" его и объедините с результатом
    // Используйте concat() для объединения массивов

    // TODO: Если это не массив, добавьте его в результат (используйте push())

    // TODO: Верните результирующий массив
}

// Тест: console.log(flattenArray([1, [2, [3, 4]], 5])); должен вернуть [1,2,3,4,5]

/**
 * Подсчитывает количество вхождений символа в строке
 * @param {string} str - Строка для поиска
 * @param {string} char - Символ для подсчета
 * @returns {number} Количество вхождений символа
 */
export function countOccurrences(str, char) {
    // TODO: Добавьте базовый случай

    // TODO: Проверьте, равен ли первый символ искомому символу
    // Если да, то count = 1, иначе count = 0

    // TODO: Верните сумму count и результата рекурсивного вызова для остальной части строки
    // Используйте str.slice(1) для получения подстроки без первого символа
}

// Пример использования: console.log(countOccurrences("hello", "l")); // Должно вернуть: 2

/**
 * Рекурсивно вычисляет сумму цифр числа
 * @param {number} n - Число для обработки
 * @returns {number} Сумма всех цифр числа
 */
export function sumDigits(n) {
    // TODO: Добавьте базовый случай

    // TODO: Реализуйте рекурсивный случай
    // Верните сумму последней цифры и результата рекурсивного вызова для остальной части
}

/**
 * Рекурсивно находит максимальный элемент в непустом массиве.
 * @param {Array<number>} arr
 * @returns {number}
 */
export function findMax(arr) {
    // TODO: Добавьте базовый случай  
    // Верните этот единственный элемент

    // TODO: Извлеките первый элемент и остальную часть массива

    // TODO: Найдите максимум в остальной части массива рекурсивно

    // TODO: Сравните первый элемент с максимумом остальной части
    // Верните больший из них
}

/**
 * Рекурсивно находит максимальный элемент в массиве с использованием деструктуризации
 * @param {Array<number>} arr - Массив чисел
 * @returns {number} Максимальный элемент массива
 */
export function findMaxWithIndex(arr, index = 0) {
    // TODO: Добавьте базовый случай (когда index равен индексу последнего элемента)
    // Верните элемент по этому индексу

    // TODO: Рекурсивно найдите максимум в оставшейся части массива
    // Вызовите функцию с index + 1

    // TODO: Сравните текущий элемент с максимумом в остатке
    // Используйте Math.max() и верните больший элемент
}

/**
 * Вычисляет base^exp (exp ≥ 0) рекурсивно.
 * @param {number} base
 * @param {number} exp — неотрицательное целое.
 * @returns {number}
 */
export function power(base, exp) {
    // TODO: Добавьте базовый случай
    // Любое число в нулевой степени равно 1

    // TODO: Реализуйте рекурсивный случай
    // Умножьте base на результат power(base, exp - 1)
}