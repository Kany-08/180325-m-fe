/**
 * Узел двусвязного списка.
 */
class LinkedListNode {
  /**
   * Создаёт новый узел.
   * @param {*} data - Значение, которое хранится в узле.
   */
  constructor(data) {
    // Сохраните данные

    // Указатель на следующий узел

    // Указатель на предыдущий узел
  }
}

/**
 * Двусвязный список.
 */
class DoubleLinkedList {
  /**
   * Создаёт пустой список.
   */
  constructor() {
    // Установите голову списка в null

    // Установите хвост списка в null

    // Изначально размер списка = 0
  }

  /**
   * Добавляет элемент в конец списка.
   * @param {*} data - Добавляемое значение.
   * @returns {DoubleLinkedList} - Ссылка на сам список для цепочек вызовов.
   */
  append(data) {
    // Создайте новый узел

    // Если список пустой:
    //   Установите голову и хвост на этот узел
    // Иначе:
    //   Привяжите новый узел к текущему хвосту
    //   Обновите ссылку tail
    // Увеличьте размер
    // Верните this
  }

  /**
   * Добавляет элемент в начало списка.
   * @param {*} data - Добавляемое значение.
   * @returns {DoubleLinkedList} - Ссылка на сам список для цепочек вызовов.
   */
  prepend(data) {
    // Создайте новый узел

    // Если список пустой:
    //   Установите голову и хвост
    // Иначе:
    //   Привяжите новый узел перед текущей головой
    //   Обновите ссылку head
    // Увеличьте размер
    // Верните this
  }

  /**
   * Удаляет элемент с конца списка.
   * @returns {*} - Данные удалённого узла или null, если список пуст.
   */
  removeTail() {
    // Если список пуст, верните null

    // Сохраните данные удаляемого узла

    // Если в списке один элемент:
    //   Обнулите head и tail
    // Иначе:
    //   Переместите tail на предыдущий узел
    //   Обнулите next у нового хвоста

    // Уменьшите размер
    // Верните данные удалённого узла
  }

  /**
   * Удаляет элемент с начала списка.
   * @returns {*} - Данные удалённого узла или null, если список пуст.
   */
  removeHead() {
    // Если список пуст, верните null

    // Сохраните данные удаляемого узла

    // Если в списке один элемент:
    //   Обнулите head и tail
    // Иначе:
    //   Переместите head на следующий узел
    //   Обнулите prev у новой головы

    // Уменьшите размер
    // Верните данные удалённого узла
  }

  /**
   * Проверяет, пуст ли список.
   * @returns {boolean} - true, если пуст, иначе false.
   */
  isEmpty() {
    // Верните true, если размер равен 0
  }

  /**
   * Выполняет callback для каждого элемента списка.
   * @param {(data: *) => void} callback - Функция, применяемая к каждому элементу.
   */
  forEach(callback) {
    // Начните с головы
    // Пока есть узел:
    //   Вызовите callback с данными
    //   Перейдите к следующему узлу
  }
}
